<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: %i[show edit update destroy]

  def index
    @<%= plural_table_name %> = authorize policy_scope(<%= class_name %>).page(params[:page])
  end

  def show; end

  def new
    @<%= singular_table_name %> = authorize <%= orm_class.build(class_name) %>
    skip_policy_scope
  end

  def edit; end

  def create
    @<%= singular_table_name %> = authorize <%= orm_class.build(class_name, "#{singular_table_name}_params") %>
    skip_policy_scope

    if @<%= orm_instance.save %>
      redirect_to <%= redirect_resource_name %>, notice: notice_message(Post)
    else
      render :new, status: :unprocessable_entity
    end
  end

  def update
    if @<%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%= redirect_resource_name %>, notice: notice_message(Post)
    else
      render :edit, status: :unprocessable_entity
    end
  end

  def destroy
    @<%= orm_instance.destroy %>
    redirect_to <%= index_helper %>_url, notice: notice_message(Post)
  end

  private

  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = authorize policy_scope(<%= class_name %>).find_by!(hashid: params[:hashid])
  end

  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(:<%= singular_table_name %>, {})
    <%- else -%>
    params.require(:<%= singular_table_name %>).permit(<%= permitted_params %>)
    <%- end -%>
  end
end
<% end -%>
